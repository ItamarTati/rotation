{"version":3,"sources":["findEncriptedIndexOfLetter.js","encriptMessage.js","options.js","App.js","serviceWorker.js","index.js"],"names":["findEncriptedIndexOfLetter","character","rotationNumber","isCapital","test","toUpperCase","toLowerCase","alphabet","index","length","encriptMessage","string","rotation","encriptedMessage","value","label","useState","message","setMessage","setRotation","className","TextField","id","onChange","e","target","select","parseInt","helperText","options","map","option","MenuItem","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ef582528.chunk.js","sourcesContent":["export default function findEncriptedIndexOfLetter(character, rotationNumber){\n    let isCapital = false \n    if (/[^A-Za-z]/.test(character)) return character\n    if (character === character.toUpperCase()){\n        isCapital = true\n        character = character.toLowerCase()\n    } \n    let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for(let index = 0; index < alphabet.length; index++){\n        let letter = alphabet[index]\n        if (letter === character){\n            if(index + rotationNumber > 25) rotationNumber = rotationNumber - 26\n            return isCapital ? alphabet[index + rotationNumber].toUpperCase() : alphabet[index + rotationNumber]\n        }\n    }\n  }","import findEncriptedIndexOfLetter from './findEncriptedIndexOfLetter'\nfunction encriptMessage(string, rotation){\n    let encriptedMessage = ''\n    for(let index = 0; index < string.length; index++){\n        let letter = string[index]\n        let rotatedLetter = findEncriptedIndexOfLetter(letter, rotation)\n        encriptedMessage += rotatedLetter\n    }\n    return encriptedMessage\n  }\n\nexport default encriptMessage","export default  [\n    {\n      value: 0,\n      label: 'No Rotation',\n    },\n    {\n      value: 1,\n      label: 'ROT-1',\n    },\n    {\n        value: 2,\n        label: 'ROT-2',\n    },\n    {\n        value: 3,\n        label: 'ROT-3',\n    },\n    {\n        value: 4,\n        label: 'ROT-4',\n    },\n    {\n        value: 5,\n        label: 'ROT-5',\n    },\n    {\n        value: 6,\n        label: 'ROT-6',\n      },\n      {\n          value: 7,\n          label: 'ROT-7',\n      },\n      {\n          value: 8,\n          label: 'ROT-8',\n      },\n      {\n          value: 9,\n          label: 'ROT-9',\n      },\n      {\n          value: 10,\n          label: 'ROT-10',\n      },\n      {\n        value: 11,\n        label: 'ROT-11',\n      },\n      {\n          value: 12,\n          label: 'ROT-12',\n      },\n      {\n          value: 13,\n          label: 'ROT-13',\n      },\n      {\n          value: 14,\n          label: 'ROT-14',\n      },\n      {\n          value: 15,\n          label: 'ROT-15',\n      },\n      {\n          value: 16,\n          label: 'ROT-16',\n        },\n        {\n            value: 17,\n            label: 'ROT-17',\n        },\n        {\n            value: 18,\n            label: 'ROT-18',\n        },\n        {\n            value: 19,\n            label: 'ROT-19',\n        },\n        {\n            value: 20,\n            label: 'ROT-20',\n        },\n        {\n            value: 21,\n            label: 'ROT-21',\n          },\n          {\n              value: 22,\n              label: 'ROT-22',\n          },\n          {\n              value: 23,\n              label: 'ROT-23',\n          },\n          {\n              value: 24,\n              label: 'ROT-24',\n          },\n          {\n              value: 25,\n              label: 'ROT-25',\n          },\n  ];\n  ","import React, { useState } from \"react\";\nimport './App.css';\nimport encriptMessage from './encriptMessage'\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport options from './options'\n\n\nexport default () => {\n  const [message, setMessage] = useState('')\n  const [rotation, setRotation] = useState(13)\n\n  return (\n  <div className=\"App\">\n    <h3 className=\"header\">Welcome to my Encripting App, type any message and the app will Encript your message by rotating the letters of the Alphabet</h3>\n    <p className=\"encript-message\">Encripted Message: <span className=\"message\">{encriptMessage(message, rotation)}</span></p>\n    <form className=\"form\">\n    <TextField id=\"outlined-basic\" label=\"Message\" value={message} onChange={e => setMessage(e.target.value)}/>\n    <TextField\n          id=\"outlined-select-currency\"\n          select\n          label=\"Select\"\n          value={rotation}\n          onChange={e => setRotation(parseInt(e.target.value))}\n          helperText=\"Please select your rotation\"\n        >\n          {options.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField> \n    </form>\n  </div>)\n} \n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}